"use strict";
// Generics
// ЁЯОп Basic Generics Example
function identity(value) {
    return value;
}
console.log(identity(""));
console.log(identity(300));
//
const addId1 = (obj) => {
    let id = Math.round(Math.random() * 100);
    return Object.assign({ id }, obj);
};
const user1 = addId1({
    name: "Parvez",
    age: 40,
});
//
const addId2 = (obj) => {
    let id = Math.round(Math.random() * 100);
    return Object.assign({ id }, obj);
};
const user2 = addId2({
    name: "Parvez",
    age: 40,
    country: "Bangladesh",
});
/*
ЁЯЪА Generics рж╕ржВржХрзНрж╖рзЗржкрзЗ
    Feature	ржХрж╛ржЬ
    - Generic Function	Dynamic ржЯрж╛ржЗржкрзЗрж░ ржлрж╛ржВрж╢ржи рждрзИрж░рж┐ ржХрж░рзЗ
    - Generic Interface	ржЯрж╛ржЗржк-рж╕рзЗржЗржл ржЕржмржЬрзЗржХрзНржЯ рждрзИрж░рж┐ ржХрж░рзЗ
    - Generic Class	ржЯрж╛ржЗржк-рж╕рзЗржЗржл ржХрзНрж▓рж╛рж╕ рждрзИрж░рж┐ ржХрж░рзЗ
    - Generic Constraints	ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржЯрж╛ржЗржкрзЗрж░ ржЬржирзНржп generics рж╕рзАржорж╛ржмржжрзНржз ржХрж░рзЗ

тЬи рждрзБржорж┐ Generics ржХрзЛржерж╛рзЯ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗ?
    - Reusable Utility Functions (ржпрзЗржоржи fetchData<T>())
    - Data Structures (Linked List, Stack, Queue)
    - Form Handling (Generic Input Fields)
    - API Response Handling (Generic API Calls)
*/
